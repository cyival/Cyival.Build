name: Create Release

on:
  push:
    tags:
      - 'v*'

env:
  PROJECT_NAME: 'cybuild'

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            runtime: linux-x64
          - os: windows-latest
            runtime: win-x64
          - os: macos-latest
            runtime: osx-x64
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal

      - name: Publish platform-specific executable
        run: dotnet publish Cyival.Build.Cli/Cyival.Build.Cli.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output dist/${{ matrix.runtime }}

      - name: Create zip archive
        uses: TheDoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          directory: dist/${{ matrix.runtime }}
          filename: ${{ env.PROJECT_NAME }}-${{ matrix.runtime }}.zip

      - name: Upload zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ matrix.runtime }}
          path: dist/${{ matrix.runtime }}/${{ env.PROJECT_NAME }}-${{ matrix.runtime }}.zip

  pack-nuget:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Pack NuGet package
        run: dotnet pack Cyival.Build.Cli/Cyival.Build.Cli.csproj --configuration Release --output nupkg --include-symbols

      - name: Upload NuGet package artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: nupkg/*.nupkg

      - name: Push to NuGet.org
        run: dotnet nuget push nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate

  draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Update Release Draft
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml
          publish: true

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-test, pack-nuget, draft-release]
    permissions:
      contents: write
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/nuget-package/*.nupkg
            artifacts/${{ env.PROJECT_NAME }}-linux-x64/${{ env.PROJECT_NAME }}-linux-x64.zip
            artifacts/${{ env.PROJECT_NAME }}-win-x64/${{ env.PROJECT_NAME }}-win-x64.zip
            artifacts/${{ env.PROJECT_NAME }}-osx-x64/${{ env.PROJECT_NAME }}-osx-x64.zip